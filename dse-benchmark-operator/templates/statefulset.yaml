apiVersion: apps/v1
kind: StatefulSet 
metadata:
  name: {{ include "dse-benchmark-operator.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "dse-benchmark-operator.name" . }}
    helm.sh/chart: {{ include "dse-benchmark-operator.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  serviceName: {{ include "dse-benchmark-operator.fullname" . }} 
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "dse-benchmark-operator.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "dse-benchmark-operator.name" . }}
        helm.sh/chart: {{ include "dse-benchmark-operator.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      serviceAccountName:  {{ include "dse-benchmark-operator.name" . }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: [ "./dse-bench" ] #dirty hack below with pvc name trying to replicate pvc name that gets generated 
        args: ["-adminport", {{ .Values.adminport | quote }}, "-namespace", {{ .Values.namespace }} , "-resultspvcname", "benchmark-results-{{ .Release.Name }}-{{ include "dse-benchmark-operator.name" . }}-0", "-bench-nodeselector", "{{ .Values.benchmark.nodeSelector }}" ]
        ports:
          - name: http
            containerPort: {{ .Values.adminport }}
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http
        resources:
          limits:
              cpu: "{{ .Values.resources.cpu }}"
              memory: {{ .Values.resources.memory }}
          requests:
              cpu: "{{ .Values.resources.cpu }}"
              memory: {{ .Values.resources.memory }}
        volumeMounts:
        - name: benchmark-results
          mountPath: "/mnt/results"
  volumeClaimTemplates:
  - metadata:
      name: benchmark-results
    spec:
      accessModes: [ "ReadWriteMany" ]
      storageClassName: {{ .Values.storage.className }}
      resources:
        requests:
          storage: {{ .Values.storage.data.size }}
